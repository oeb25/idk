use crate::common::*;
use crate::prob_ast::*;
use crate::str_intern;
use crate::parse::ParseError;

grammar;

extern {
    type Error = ParseError;
}

match {
    r"\s*" => { }, // The default whitespace skipping is disabled an `ignore pattern` is specified
    r"//[^\n\r]*[\n\r]*" => { }, // Skip `// comments`
    r"/\*[^*]*\*+(?:[^/*][^*]*\*+)*/" => { },  // Skip `/* comments */`

    "m",
    "Bel",
    "Plaus",
    r"[a-zA-Z_][a-zA-Z0-9_]*",
    r"[0-9]+",
    r"[0-9]\.[0-9]*",
    r"\.[0-9]+",
    r#""[^"]*""#,

    "Agents",
    "=",
    "K",
    "C",
    "E",
    "D",
    "->",
    "!",
    "|",
    "&",
    "<->",
    "<-",
    "@",
    "#",

    "-",
    ",",
    "?",
    "::",
    ":",
    ":=",
    "!=",
    "(",
    ")",
    "{",
    "}",
    "*",
    "/",
    "&&",
    "+",
    "<",
    "<=",
    "==",
    "==>",
    ">",
    ">=",
    "||",
    "assert",
    "Bool",
    "decreases",
    "else",
    "ensures",
    "exists",
    "false",
    "forall",
    "function",
    "if",
    "Int",
    "invariant",
    "method",
    "modifies",
    "old",
    "requires",
    "result",
    "returns",
    "true",
    "var",
    "while",
}

Sep<S, T>: Vec<T> = {
    <mut xs:(<T> S)*> <x:T?> => {
        if let Some(x) = x {
            xs.push(x);
        }
        xs
    }
};
NonEmptySep<S, T>: Vec<T> = {
    <mut xs:(<T> S)*> <x:T> => {
        xs.push(x);
        xs
    }
};

pub Facts: Vec<Fact> = Fact*;

Fact: Fact = {
    "Agents" ":" <Sep<",", State>> => Fact::Agents(<>),
    "m" "(" <States> ")" "=" <Float> => Fact::M(<>),
    "Bel" "(" <States> ")" "=" <Float> => Fact::Bel(<>),
    "Plaus" "(" <States> ")" "=" <Float> => Fact::Plaus(<>),
}
Float: f64 = {
    r"[0-9]+" => <>.parse().unwrap(),
    r"[0-9]\.[0-9]*" => <>.parse().unwrap(),
    r"\.[0-9]+" => <>.parse().unwrap(),
}
State: State = Ident => State(<>);
States: States = "{" <Sep<",", State>> "}" => States(<>);

Ident: Ident = <l:@L> <i:r"[a-zA-Z_][a-zA-Z0-9_]*"> <r:@R> => Ident::new(i, Span::start_end(l, r));
